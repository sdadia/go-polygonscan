#
#   template.yml 
#
#   Parent template defining required resources for the pvcam cloud trip calculation/querying service.
#
#
#   Template structure maintained by platform team. 
#   Please reach out to daniel@pvcameras.com or rob@pvcameras.com for any platform requirement changes.
#

AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31


Parameters:

  ProjectId:
    Type: String
    Description: Project ID used for identifying project resources
    Default: pvcam
  
  Stage: 
    Type: String
    Description: Determines whether or not to deploy production resources
  
  ServiceName:
    Type: String
    Description: Name of the current service
    Default: trip-calculation1

  ProcessedTelematicsStream:
    Type: String
    Description: ARN of telematics stream to process
  
  
    

Resources:

  # ODM Layer for use with trip calculation functions.
  pvappsOdmDev:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: pvapps-odm-dev
      ContentUri: Layers/pvapps-odm-dev.zip
      CompatibleRuntimes:
        - python3.6
      RetentionPolicy: Retain

  #
  # Stores list of spans for telematics trip calculations
  #
  # *** SUBJECT TO CHANGE AS OPTIMIZATIONS ARE IMPLEMENTED IN DDB FOR TS DATA ***
  #
  SpanTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: deviceId
          AttributeType: S
      KeySchema:
        -
          AttributeName: deviceId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      
  
  #
  # Stores timeseries records that have been tagged with spanIds
  #
  # *** SUBJECT TO CHANGE AS OPTIMIZATIONS ARE IMPLEMENTED IN DDB FOR TS DATA ***
  #
  TimeseriesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: spanId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        -
          AttributeName: spanId
          KeyType: HASH
        -
          AttributeName: timestamp
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  #
  # Stores aggregated metrics for a given span ID
  #
  # *** SUBJECT TO CHANGE AS OPTIMIZATIONS ARE IMPLEMENTED IN DDB FOR AGG DATA ***
  #
  AggregateTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: spanId_MetricType
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        -
          AttributeName: spanId_MetricType
          KeyType: HASH
        -
          AttributeName: timestamp
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  #
  # Receives telematics records that have been tagged with SpanIds already
  # Data is used by consumers for aggregations and insertion into timeseries data stores
  #
  TaggedDataStream:
    Type: AWS::Kinesis::Stream
    Properties: 
      ShardCount: 1
      Tags: 
        - Key: Project
          Value: !Ref ProjectId

  #
  # Receives a timeseries IoT record from Kinesis
  # Determines the span the record belongs to
  # Creates a timeseries DDB record from the data
  # Tags the timeseries DDB record with SpanId
  # Inserts the record into DDB
  #
  CreateTimeseriesRecord:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Timeout: 60
      CodeUri: Functions/CreateTimeseriesRecord/
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRoleDDBKinesis.Arn 
      Environment:
        Variables:
          SpanTable: !Ref SpanTable
          TimeseriesTable: !Ref TimeseriesTable
          TaggedDataStream: !Ref TaggedDataStream
      # Input Event Pending Kinesis Stream Creation For Decompressed/Enriched Data 
      Events:
        KinesisSource:
          Type: Kinesis
          Properties:
            Stream: !Ref ProcessedTelematicsStream
            StartingPosition: TRIM_HORIZON
            BatchSize: 100
            Enabled: true

  #
  # Invoked via external Lambda function
  # Looks up span table for trip spans for given timerange
  # Calculates Trips given spans retrieved
  # Returns trips + spans in response
  #
  CalculateTrips:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Timeout: 60
      CodeUri: Functions/CalculateTrips/
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRoleDDB.Arn 
      Environment:
        Variables:
          SpanTable: !Ref SpanTable
          TimeseriesTable: !Ref TimeseriesTable
          AggregateTable: !Ref AggregateTable

  #
  # Invoked via Kinesis Stream
  # Calculates average speed value for a device in 1 minute aggregations
  # Inserts calculated records into aggregation DDB table
  #
  SpeedAggregations:
    DependsOn: TaggedDataStream
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Timeout: 60
      CodeUri: Functions/SpeedAggregations/
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRoleDDBKinesis.Arn 
      Environment:
        Variables:
          AggDynamoDBTableName: !Ref AggregateTable
      Events:
        KinesisSource:
          Type: Kinesis
          Properties:
            Stream: !GetAtt TaggedDataStream.Arn
            StartingPosition: TRIM_HORIZON
            BatchSize: 100
            Enabled: false

  #
  # Invoked via Kinesis Stream
  # Inserts records into TS data store (DDB) in batches
  #
  InsertTSRecords:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Timeout: 60
      CodeUri: Functions/BatchInsertTSRecords/
      Runtime: python3.6
      Role: !GetAtt LambdaExecutionRoleDDBKinesis.Arn 
      Environment:
        Variables:
          TimeseriesTable: !Ref TimeseriesTable
      Events:
        KinesisSource:
          Type: Kinesis
          Properties:
            Stream: !GetAtt TaggedDataStream.Arn
            StartingPosition: TRIM_HORIZON
            BatchSize: 100
            Enabled: false

  #
  # Execution Role for Lambda functions within this service that require
  # access to Span/Timeseries DDB Tables
  #
  LambdaExecutionRoleDDB:
    Type: 'AWS::IAM::Role'
    Description: IAM Execution Role for CreateTimeseries Record Function
    Properties:
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      RoleName: !Sub
        - ${ProjectId}-${ServiceName}-LambdaExecutionRoleDDB-${Stage}
        - { ProjectId: !Ref ProjectId,ServiceName: !Ref ServiceName, Stage: !Ref Stage }
      Policies:
        - PolicyName: DDB
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:BatchReadItem'
                Resource: 
                  - !GetAtt SpanTable.Arn
                  - !GetAtt TimeseriesTable.Arn
                  - !GetAtt AggregateTable.Arn
                Effect: Allow
        
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com

  #
  # Execution Role for Lambda functions within this service that require
  # access to Span/Timeseries DDB Tables along with Kinesis
  #
  LambdaExecutionRoleDDBKinesis:
    Type: 'AWS::IAM::Role'
    Description: IAM Execution Role for CreateTimeseries Record Function
    Properties:
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      RoleName: !Sub
        - ${ProjectId}-${ServiceName}-LambdaExecutionRoleDDBKinesis-${Stage}
        - { ProjectId: !Ref ProjectId,ServiceName: !Ref ServiceName, Stage: !Ref Stage }
      Policies:
        - PolicyName: DDB
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:BatchReadItem'
                Resource: 
                  - !GetAtt SpanTable.Arn
                  - !GetAtt TimeseriesTable.Arn
                  - !GetAtt AggregateTable.Arn
                Effect: Allow
        - PolicyName: Kinesis
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'kinesis:GetRecords'
                  - 'kinesis:GetShardIterator'
                  - 'kinesis:DescribeStream'
                  - 'kinesis:ListStreams'
                Resource: 
                  - !GetAtt TaggedDataStream.Arn
                  - !Ref ProcessedTelematicsStream
                Effect: Allow
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com

Outputs:

  CalculateTripsRecordExport:
    # Used by the following:
    # RestAPI: getVehicleTrips
    Value: !GetAtt CalculateTrips.Arn
    Export:
      Name: !Sub "${ProjectId}-CalculateTrips-${Stage}"